// Generated by macro
#![no_std]
#![no_main]
extern crate alloc;
use alloc::vec::Vec;

#[global_allocator]
static GLOBAL: polkavm_derive::LeakingAllocator = polkavm_derive::LeakingAllocator;

#[panic_handler]
fn panic(_info: &core::panic::PanicInfo) -> ! {
    unsafe {
        core::arch::asm!("unimp", options(noreturn));
    }
}

#[polkavm_derive::polkavm_import]
extern "C" {
    fn host_call(extension_id: u64, call_ptr: u32, call_len: u32) -> u64;
}

type AssetId = u32;
type AccountId = [u8; 32];
type Balance = u64;

// #[program::extension(extension_id = 4071833530116166512u64, fn_index = 1)]
// fn balance(asset: AssetId, who: AccountId) -> Balance {}
// expands to
#[allow(non_camel_case_types)]
#[derive(parity_scale_codec::Encode, parity_scale_codec::Decode)]
enum BalanceCall {
    #[codec(index = 1)]
    balance { asset: AssetId, who: AccountId },
}
fn balance(asset: AssetId, who: AccountId) -> Balance {
    let encoded_call = parity_scale_codec::Encode::encode(&BalanceCall::balance { asset, who });
    let res = unsafe {
        host_call(
            4071833530116166512u64,
            encoded_call.as_ptr() as u32,
            encoded_call.len() as u32,
        )
    };
    let res_ptr = res as u32 as *const u8;
    let res_len = (res >> 32) as usize;
    let mut res_bytes = unsafe { core::slice::from_raw_parts(res_ptr, res_len) };
    parity_scale_codec::Decode::decode(&mut res_bytes).expect("Failed to decode result")
}

// #[program::entrypoint]
// fn sum_balance(asset: AssetId, accounts: Vec<AccountId>) -> Balance {
//     let mut sum = 0;
//     for account in accounts {
//         sum += balance(asset, account);
//     }
//     sum
// }
// expands to
#[polkavm_derive::polkavm_export]
extern "C" fn main(arg_ptr: u32, size: u32) -> u64 {
    // Decode the arguments
    let mut arg_bytes = unsafe { core::slice::from_raw_parts(arg_ptr as *const u8, size as usize) };
    let asset: AssetId = parity_scale_codec::Decode::decode(&mut arg_bytes).expect("Failed to decode asset");
    let accounts: Vec<AccountId> =
        parity_scale_codec::Decode::decode(&mut arg_bytes).expect("Failed to decode accounts");

    // Call the function
    let res = sum_balance(asset, accounts);

    // Encode the result
    let encoded_res = parity_scale_codec::Encode::encode(&res);

    // Return the result
    (encoded_res.len() as u64) << 32 | (encoded_res.as_ptr() as u64)
}

fn sum_balance(asset: AssetId, accounts: Vec<AccountId>) -> Balance {
    let mut sum = 0;
    for account in accounts {
        sum += balance(asset, account);
    }
    sum
}
