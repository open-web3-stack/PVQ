use crate::DispatchError;
use crate::Dispatchable;
use crate::ExtensionTypeId;
use parity_scale_codec::{Decode, Encode};
// SDK codes
pub trait ExtensionFungibles {
    // ExtensionId should be generated by the macro
    // It should normalize the order of methods and parameter names
    const TYPE_ID: ExtensionTypeId = 1u64;
    // TODO: In practice, these type are defined together in Config
    type Config: Config;
    fn transfer(
        from: <Self::Config as Config>::AccountId,
        to: <Self::Config as Config>::AccountId,
        amount: <Self::Config as Config>::Balance,
    ) -> <Self::Config as Config>::Balance;
    fn balance(account: <Self::Config as Config>::AccountId) -> <Self::Config as Config>::Balance;
}

pub trait Config {
    type Call: Dispatchable + Encode + Decode;
    type AccountId;
    type Balance;
}

// User impls: handwritten
pub struct ExtensionFungiblesImpl;

pub struct ConfigImpl;
impl Config for ConfigImpl {
    // this associated type is generated by the macro
    type Call = ExtensionFungiblesImplCall;
    type AccountId = u32;
    type Balance = u64;
}

impl ExtensionFungibles for ExtensionFungiblesImpl {
    type Config = ConfigImpl;
    fn transfer(
        _from: <Self::Config as Config>::AccountId,
        _to: <Self::Config as Config>::AccountId,
        _amount: <Self::Config as Config>::Balance,
    ) -> <Self::Config as Config>::Balance {
        unimplemented!()
    }
    fn balance(_account: <Self::Config as Config>::AccountId) -> <Self::Config as Config>::Balance {
        unimplemented!()
    }
}

// User impls: generated
#[derive(Encode, Decode)]
pub enum ExtensionFungiblesImplCall {
    Transfer { from: u32, to: u32, amount: u64 },
    // Differentiate with associated type Balance
    Balance { account: u32 },
}

impl Dispatchable for ExtensionFungiblesImplCall {
    fn dispatch(self) -> Result<Vec<u8>, DispatchError> {
        match self {
            Self::Transfer { from, to, amount } => Ok(ExtensionFungiblesImpl::transfer(from, to, amount).encode()),
            Self::Balance { account } => Ok(ExtensionFungiblesImpl::balance(account).encode()),
        }
    }
}
